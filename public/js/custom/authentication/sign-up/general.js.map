{"version":3,"file":"general.js","names":["KTSignupGeneral","form","submitButton","validator","passwordMeter","validatePassword","getScore","init","document","querySelector","KTPasswordMeter","getInstance","url","URL","e","isValidUrl","closest","getAttribute","FormValidation","formValidation","fields","validators","notEmpty","message","email","regexp","password","callback","input","value","length","identical","compare","toc","plugins","trigger","Trigger","event","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","preventDefault","revalidateField","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","reset","redirectUrl","location","href","this","updateFieldStatus","name","password_confirmation","axios","post","FormData","response","catch","error","KTUtil","onDOMContentLoaded"],"sources":["authentication/sign-up/general.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTSignupGeneral = function () {\r\n    // Elements\r\n    var form;\r\n    var submitButton;\r\n    var validator;\r\n    var passwordMeter;\r\n\r\n    // Handle form\r\n    var handleForm = function (e) {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'first-name': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'First Name is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'last-name': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Last Name is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'email': {\r\n                        validators: {\r\n                            regexp: {\r\n                                regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                message: 'The value is not a valid email address',\r\n                            },\r\n                            notEmpty: {\r\n                                message: 'Email address is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password is required'\r\n                            },\r\n                            callback: {\r\n                                message: 'Please enter valid password',\r\n                                callback: function (input) {\r\n                                    if (input.value.length > 0) {\r\n                                        return validatePassword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    'confirm-password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password confirmation is required'\r\n                            },\r\n                            identical: {\r\n                                compare: function () {\r\n                                    return form.querySelector('[name=\"password\"]').value;\r\n                                },\r\n                                message: 'The password and its confirm are not the same'\r\n                            }\r\n                        }\r\n                    },\r\n                    'toc': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'You must accept the terms and conditions'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger({\r\n                        event: {\r\n                            password: false\r\n                        }\r\n                    }),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',  // comment to enable invalid state icons\r\n                        eleValidClass: '' // comment to enable valid state icons\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Handle form submit\r\n        submitButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then(function (status) {\r\n                if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click\r\n                    submitButton.disabled = true;\r\n\r\n                    // Simulate ajax request\r\n                    setTimeout(function () {\r\n                        // Hide loading indication\r\n                        submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                        // Enable button\r\n                        submitButton.disabled = false;\r\n\r\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: \"You have successfully reset your password!\",\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        }).then(function (result) {\r\n                            if (result.isConfirmed) {\r\n                                form.reset();  // reset form\r\n                                passwordMeter.reset();  // reset password meter\r\n                                //form.submit();\r\n\r\n                                //form.submit(); // submit form\r\n                                var redirectUrl = form.getAttribute('data-kt-redirect-url');\r\n                                if (redirectUrl) {\r\n                                    location.href = redirectUrl;\r\n                                }\r\n                            }\r\n                        });\r\n                    }, 1500);\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\"\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Handle password input\r\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function () {\r\n            if (this.value.length > 0) {\r\n                validator.updateFieldStatus('password', 'NotValidated');\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // Handle form ajax\r\n    var handleFormAjax = function (e) {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'name': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Name is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'email': {\r\n                        validators: {\r\n                            regexp: {\r\n                                regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                                message: 'The value is not a valid email address',\r\n                            },\r\n                            notEmpty: {\r\n                                message: 'Email address is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password is required'\r\n                            },\r\n                            callback: {\r\n                                message: 'Please enter valid password',\r\n                                callback: function (input) {\r\n                                    if (input.value.length > 0) {\r\n                                        return validatePassword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    'password_confirmation': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password confirmation is required'\r\n                            },\r\n                            identical: {\r\n                                compare: function () {\r\n                                    return form.querySelector('[name=\"password\"]').value;\r\n                                },\r\n                                message: 'The password and its confirm are not the same'\r\n                            }\r\n                        }\r\n                    },\r\n                    'toc': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'You must accept the terms and conditions'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger({\r\n                        event: {\r\n                            password: false\r\n                        }\r\n                    }),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',  // comment to enable invalid state icons\r\n                        eleValidClass: '' // comment to enable valid state icons\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Handle form submit\r\n        submitButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then(function (status) {\r\n                if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click\r\n                    submitButton.disabled = true;\r\n\r\n\r\n                    // Check axios library docs: https://axios-http.com/docs/intro\r\n                    axios.post(submitButton.closest('form').getAttribute('action'), new FormData(form)).then(function (response) {\r\n                        if (response) {\r\n                            form.reset();\r\n\r\n                            const redirectUrl = form.getAttribute('data-kt-redirect-url');\r\n\r\n                            if (redirectUrl) {\r\n                                location.href = redirectUrl;\r\n                            }\r\n                        } else {\r\n                            // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                            Swal.fire({\r\n                                text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                                icon: \"error\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n                        }\r\n                    }).catch(function (error) {\r\n                        Swal.fire({\r\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }).then(() => {\r\n                        // Hide loading indication\r\n                        submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                        // Enable button\r\n                        submitButton.disabled = false;\r\n                    });\r\n\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\"\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Handle password input\r\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function () {\r\n            if (this.value.length > 0) {\r\n                validator.updateFieldStatus('password', 'NotValidated');\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // Password input validation\r\n    var validatePassword = function () {\r\n        return (passwordMeter.getScore() > 50);\r\n    }\r\n\r\n    var isValidUrl = function(url) {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Public functions\r\n    return {\r\n        // Initialization\r\n        init: function () {\r\n            // Elements\r\n            form = document.querySelector('#kt_sign_up_form');\r\n            submitButton = document.querySelector('#kt_sign_up_submit');\r\n            passwordMeter = KTPasswordMeter.getInstance(form.querySelector('[data-kt-password-meter=\"true\"]'));\r\n\r\n            if (isValidUrl(submitButton.closest('form').getAttribute('action'))) {\r\n                handleFormAjax();\r\n            } else {\r\n                handleForm();\r\n            }\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTSignupGeneral.init();\r\n});\r\n"]}