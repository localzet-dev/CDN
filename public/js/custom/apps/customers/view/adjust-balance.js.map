{"version":3,"file":"adjust-balance.js","names":["KTModalAdjustBalance","element","submitButton","cancelButton","closeButton","validator","maskInput","newBalance","form","modal","init","document","querySelector","bootstrap","Modal","Inputmask","numericInput","mask","currentBalance","getElementById","isNegative","innerHTML","includes","maskValue","currentValue","parseFloat","replace","addEventListener","e","target","value","isNaN","toFixed","handleBalanceCalculator","FormValidation","formValidation","fields","adjustment","validators","notEmpty","message","amount","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","$","on","revalidateField","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","hide","reset","showCancelButton","cancelButtonText","dismiss","KTUtil","onDOMContentLoaded"],"sources":["apps/customers/view/adjust-balance.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTModalAdjustBalance = function () {\r\n    var element;\r\n    var submitButton;\r\n    var cancelButton;\r\n    var closeButton;\r\n    var validator;\r\n    var maskInput;\r\n    var newBalance;\r\n    var form;\r\n    var modal;\r\n\r\n    // Init form inputs\r\n    var initForm = function () {\r\n        // Init inputmask plugin --- For more info please refer to the official documentation here: https://github.com/RobinHerbots/Inputmask\r\n        Inputmask(\"US$ 9,999,999.99\", {\r\n            \"numericInput\": true\r\n        }).mask(\"#kt_modal_inputmask\");\r\n    }\r\n\r\n    var handleBalanceCalculator = function () {\r\n        // Select elements\r\n        const currentBalance = element.querySelector('[kt-modal-adjust-balance=\"current_balance\"]');\r\n        newBalance = element.querySelector('[kt-modal-adjust-balance=\"new_balance\"]');\r\n        maskInput = document.getElementById('kt_modal_inputmask');\r\n\r\n        // Get current balance value\r\n        const isNegative = currentBalance.innerHTML.includes('-');\r\n        let currentValue = parseFloat(currentBalance.innerHTML.replace(/[^0-9.]/g, '').replace(',', ''));\r\n        currentValue = isNegative ? currentValue * -1 : currentValue; \r\n\r\n        // On change event for inputmask\r\n        let maskValue;\r\n        maskInput.addEventListener('focusout', function (e) {\r\n            // Get inputmask value on change\r\n            maskValue = parseFloat(e.target.value.replace(/[^0-9.]/g, '').replace(',', ''));\r\n\r\n            // Set mask value as 0 when NaN detected\r\n            if(isNaN(maskValue)){\r\n                maskValue = 0;\r\n            }\r\n\r\n            // Calculate & set new balance value\r\n            newBalance.innerHTML = 'US$ ' + (maskValue + currentValue).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n        });\r\n    }\r\n\r\n    // Handle form validation and submittion\r\n    var handleForm = function () {\r\n        // Stepper custom navigation\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'adjustment': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Adjustment type is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'amount': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Amount is required'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Revalidate country field. For more info, plase visit the official plugin site: https://select2.org/\r\n        $(form.querySelector('[name=\"adjustment\"]')).on('change', function () {\r\n            // Revalidate the field when an option is chosen\r\n            validator.revalidateField('adjustment');\r\n        });\r\n\r\n        // Action buttons\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable submit button whilst loading\r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission\r\n                        setTimeout(function () {\r\n                            // Simulate form submission\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function (result) {\r\n                                if (result.isConfirmed) {\r\n                                    modal.hide();\r\n\r\n                                    // Enable submit button after loading\r\n                                    submitButton.disabled = false;\r\n\r\n                                    // Reset form for demo purposes only\r\n                                    form.reset();\r\n                                    newBalance.innerHTML = \"--\";\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    } else {\r\n                        // Show popup warning \r\n                        Swal.fire({\r\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        cancelButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        closeButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            // Elements\r\n            element = document.querySelector('#kt_modal_adjust_balance');\r\n            modal = new bootstrap.Modal(element);\r\n\r\n            form = element.querySelector('#kt_modal_adjust_balance_form');\r\n            submitButton = form.querySelector('#kt_modal_adjust_balance_submit');\r\n            cancelButton = form.querySelector('#kt_modal_adjust_balance_cancel');\r\n            closeButton = element.querySelector('#kt_modal_adjust_balance_close');\r\n\r\n            initForm();\r\n            handleBalanceCalculator();\r\n            handleForm();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTModalAdjustBalance.init();\r\n});"]}