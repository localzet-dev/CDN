{"version":3,"file":"compose.js","names":["KTAppInboxCompose","handleCCandBCC","el","ccElement","querySelector","ccButton","ccClose","bccElement","bccButton","bccClose","addEventListener","e","preventDefault","classList","remove","add","handleSubmit","submitButton","setAttribute","setTimeout","removeAttribute","initTagify","addAllSuggestionsElm","tagify","Tagify","tagTextProp","enforceWhitelist","skipInvalid","dropdown","closeOnSelect","enabled","classname","searchKeys","templates","tag","tagData","title","email","this","settings","classNames","class","getAttributes","hostUrl","avatar","name","dropdownItem","whitelist","value","on","dropdownContentElm","detail","DOM","content","suggestedListItems","length","parseTemplate","reduce","remainingSuggestions","item","isTagDuplicate","insertBefore","firstChild","elm","selectAll","call","initQuill","Quill","modules","toolbar","header","placeholder","theme","classes","initDropzone","id","dropzone","uploadButton","previewNode","previewTemplate","parentNode","innerHTML","removeChild","myDropzone","Dropzone","url","parallelUploads","maxFilesize","previewsContainer","clickable","file","querySelectorAll","forEach","dropzoneItem","style","display","progress","progressBar","width","opacity","progressBars","init","form","document","allTagify","initForm","KTUtil","onDOMContentLoaded"],"sources":["apps/inbox/compose.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTAppInboxCompose = function () {\r\n    // Private functions\r\n    // Init reply form\r\n    const initForm = () => {\r\n        // Set variables\r\n        const form = document.querySelector('#kt_inbox_compose_form');\r\n        const allTagify = form.querySelectorAll('[data-kt-inbox-form=\"tagify\"]');\r\n\r\n        // Handle CC and BCC\r\n        handleCCandBCC(form);\r\n\r\n        // Handle submit form\r\n        handleSubmit(form);\r\n\r\n        // Init tagify\r\n        allTagify.forEach(tagify => {\r\n            initTagify(tagify);\r\n        });\r\n\r\n        // Init quill editor\r\n        initQuill(form);\r\n\r\n        // Init dropzone\r\n        initDropzone(form);\r\n    }\r\n\r\n    // Handle CC and BCC toggle\r\n    const handleCCandBCC = (el) => {\r\n        // Get elements\r\n        const ccElement = el.querySelector('[data-kt-inbox-form=\"cc\"]');\r\n        const ccButton = el.querySelector('[data-kt-inbox-form=\"cc_button\"]');\r\n        const ccClose = el.querySelector('[data-kt-inbox-form=\"cc_close\"]');\r\n        const bccElement = el.querySelector('[data-kt-inbox-form=\"bcc\"]');\r\n        const bccButton = el.querySelector('[data-kt-inbox-form=\"bcc_button\"]');\r\n        const bccClose = el.querySelector('[data-kt-inbox-form=\"bcc_close\"]');\r\n\r\n        // Handle CC button click\r\n        ccButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            ccElement.classList.remove('d-none');\r\n            ccElement.classList.add('d-flex');\r\n        });\r\n\r\n        // Handle CC close button click\r\n        ccClose.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            ccElement.classList.add('d-none');\r\n            ccElement.classList.remove('d-flex');\r\n        });\r\n\r\n        // Handle BCC button click\r\n        bccButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            bccElement.classList.remove('d-none');\r\n            bccElement.classList.add('d-flex');\r\n        });\r\n\r\n        // Handle CC close button click\r\n        bccClose.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            bccElement.classList.add('d-none');\r\n            bccElement.classList.remove('d-flex');\r\n        });\r\n    }\r\n\r\n    // Handle submit form\r\n    const handleSubmit = (el) => {\r\n        const submitButton = el.querySelector('[data-kt-inbox-form=\"send\"]');\r\n\r\n        // Handle button click event\r\n        submitButton.addEventListener(\"click\", function () {\r\n            // Activate indicator\r\n            submitButton.setAttribute(\"data-kt-indicator\", \"on\");\r\n\r\n            // Disable indicator after 3 seconds\r\n            setTimeout(function () {\r\n                submitButton.removeAttribute(\"data-kt-indicator\");\r\n            }, 3000);\r\n        });\r\n    }\r\n\r\n    // Init tagify \r\n    const initTagify = (el) => {\r\n        var inputElm = el;\r\n\r\n        const usersList = [\r\n            { value: 1, name: 'Emma Smith', avatar: 'avatars/300-6.jpg', email: 'e.smith@kpmg.com.au' },\r\n            { value: 2, name: 'Max Smith', avatar: 'avatars/300-1.jpg', email: 'max@kt.com' },\r\n            { value: 3, name: 'Sean Bean', avatar: 'avatars/300-5.jpg', email: 'sean@dellito.com' },\r\n            { value: 4, name: 'Brian Cox', avatar: 'avatars/300-25.jpg', email: 'brian@exchange.com' },\r\n            { value: 5, name: 'Francis Mitcham', avatar: 'avatars/300-9.jpg', email: 'f.mitcham@kpmg.com.au' },\r\n            { value: 6, name: 'Dan Wilson', avatar: 'avatars/300-23.jpg', email: 'dam@consilting.com' },\r\n            { value: 7, name: 'Ana Crown', avatar: 'avatars/300-12.jpg', email: 'ana.cf@limtel.com' },\r\n            { value: 8, name: 'John Miller', avatar: 'avatars/300-13.jpg', email: 'miller@mapple.com' }\r\n        ];\r\n\r\n        function tagTemplate(tagData) {\r\n            return `\r\n                <tag title=\"${(tagData.title || tagData.email)}\"\r\n                        contenteditable='false'\r\n                        spellcheck='false'\r\n                        tabIndex=\"-1\"\r\n                        class=\"${this.settings.classNames.tag} ${tagData.class ? tagData.class : \"\"}\"\r\n                        ${this.getAttributes(tagData)}>\r\n                    <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\r\n                    <div class=\"d-flex align-items-center\">\r\n                        <div class='tagify__tag__avatar-wrap ps-0'>\r\n                            <img onerror=\"this.style.visibility='hidden'\" class=\"rounded-circle w-25px me-2\" src=\"${hostUrl}media/${tagData.avatar}\">\r\n                        </div>\r\n                        <span class='tagify__tag-text'>${tagData.name}</span>\r\n                    </div>\r\n                </tag>\r\n            `\r\n        }\r\n\r\n        function suggestionItemTemplate(tagData) {\r\n            return `\r\n                <div ${this.getAttributes(tagData)}\r\n                    class='tagify__dropdown__item d-flex align-items-center ${tagData.class ? tagData.class : \"\"}'\r\n                    tabindex=\"0\"\r\n                    role=\"option\">\r\n\r\n                    ${tagData.avatar ? `\r\n                            <div class='tagify__dropdown__item__avatar-wrap me-2'>\r\n                                <img onerror=\"this.style.visibility='hidden'\"  class=\"rounded-circle w-50px me-2\" src=\"${hostUrl}media/${tagData.avatar}\">\r\n                            </div>` : ''\r\n                }\r\n\r\n                    <div class=\"d-flex flex-column\">\r\n                        <strong>${tagData.name}</strong>\r\n                        <span>${tagData.email}</span>\r\n                    </div>\r\n                </div>\r\n            `\r\n        }\r\n\r\n        // initialize Tagify on the above input node reference\r\n        var tagify = new Tagify(inputElm, {\r\n            tagTextProp: 'name', // very important since a custom template is used with this property as text. allows typing a \"value\" or a \"name\" to match input with whitelist\r\n            enforceWhitelist: true,\r\n            skipInvalid: true, // do not remporarily add invalid tags\r\n            dropdown: {\r\n                closeOnSelect: false,\r\n                enabled: 0,\r\n                classname: 'users-list',\r\n                searchKeys: ['name', 'email']  // very important to set by which keys to search for suggesttions when typing\r\n            },\r\n            templates: {\r\n                tag: tagTemplate,\r\n                dropdownItem: suggestionItemTemplate\r\n            },\r\n            whitelist: usersList\r\n        })\r\n\r\n        tagify.on('dropdown:show dropdown:updated', onDropdownShow)\r\n        tagify.on('dropdown:select', onSelectSuggestion)\r\n\r\n        var addAllSuggestionsElm;\r\n\r\n        function onDropdownShow(e) {\r\n            var dropdownContentElm = e.detail.tagify.DOM.dropdown.content;\r\n\r\n            if (tagify.suggestedListItems.length > 1) {\r\n                addAllSuggestionsElm = getAddAllSuggestionsElm();\r\n\r\n                // insert \"addAllSuggestionsElm\" as the first element in the suggestions list\r\n                dropdownContentElm.insertBefore(addAllSuggestionsElm, dropdownContentElm.firstChild)\r\n            }\r\n        }\r\n\r\n        function onSelectSuggestion(e) {\r\n            if (e.detail.elm == addAllSuggestionsElm)\r\n                tagify.dropdown.selectAll.call(tagify);\r\n        }\r\n\r\n        // create a \"add all\" custom suggestion element every time the dropdown changes\r\n        function getAddAllSuggestionsElm() {\r\n            // suggestions items should be based on \"dropdownItem\" template\r\n            return tagify.parseTemplate('dropdownItem', [{\r\n                class: \"addAll\",\r\n                name: \"Add all\",\r\n                email: tagify.settings.whitelist.reduce(function (remainingSuggestions, item) {\r\n                    return tagify.isTagDuplicate(item.value) ? remainingSuggestions : remainingSuggestions + 1\r\n                }, 0) + \" Members\"\r\n            }]\r\n            )\r\n        }\r\n    }\r\n\r\n    // Init quill editor \r\n    const initQuill = (el) => {\r\n        var quill = new Quill('#kt_inbox_form_editor', {\r\n            modules: {\r\n                toolbar: [\r\n                    [{\r\n                        header: [1, 2, false]\r\n                    }],\r\n                    ['bold', 'italic', 'underline'],\r\n                    ['image', 'code-block']\r\n                ]\r\n            },\r\n            placeholder: 'Type your text here...',\r\n            theme: 'snow' // or 'bubble'\r\n        });\r\n\r\n        // Customize editor\r\n        const toolbar = el.querySelector('.ql-toolbar');\r\n\r\n        if (toolbar) {\r\n            const classes = ['px-5', 'border-top-0', 'border-start-0', 'border-end-0'];\r\n            toolbar.classList.add(...classes);\r\n        }\r\n    }\r\n\r\n    // Init dropzone\r\n    const initDropzone = (el) => {\r\n        // set the dropzone container id\r\n        const id = '[data-kt-inbox-form=\"dropzone\"]';\r\n        const dropzone = el.querySelector(id);\r\n        const uploadButton = el.querySelector('[data-kt-inbox-form=\"dropzone_upload\"]');\r\n\r\n        // set the preview element template\r\n        var previewNode = dropzone.querySelector(\".dropzone-item\");\r\n        previewNode.id = \"\";\r\n        var previewTemplate = previewNode.parentNode.innerHTML;\r\n        previewNode.parentNode.removeChild(previewNode);\r\n\r\n        var myDropzone = new Dropzone(id, { // Make the whole body a dropzone\r\n            url: \"https://preview.keenthemes.com/api/dropzone/void.php\", // Set the url for your upload script location\r\n            parallelUploads: 20,\r\n            maxFilesize: 1, // Max filesize in MB\r\n            previewTemplate: previewTemplate,\r\n            previewsContainer: id + \" .dropzone-items\", // Define the container to display the previews\r\n            clickable: uploadButton // Define the element that should be used as click trigger to select files.\r\n        });\r\n\r\n\r\n        myDropzone.on(\"addedfile\", function (file) {\r\n            // Hookup the start button\r\n            const dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\r\n            dropzoneItems.forEach(dropzoneItem => {\r\n                dropzoneItem.style.display = '';\r\n            });\r\n        });\r\n\r\n        // Update the total progress bar\r\n        myDropzone.on(\"totaluploadprogress\", function (progress) {\r\n            const progressBars = dropzone.querySelectorAll('.progress-bar');\r\n            progressBars.forEach(progressBar => {\r\n                progressBar.style.width = progress + \"%\";\r\n            });\r\n        });\r\n\r\n        myDropzone.on(\"sending\", function (file) {\r\n            // Show the total progress bar when upload starts\r\n            const progressBars = dropzone.querySelectorAll('.progress-bar');\r\n            progressBars.forEach(progressBar => {\r\n                progressBar.style.opacity = \"1\";\r\n            });\r\n        });\r\n\r\n        // Hide the total progress bar when nothing\"s uploading anymore\r\n        myDropzone.on(\"complete\", function (progress) {\r\n            const progressBars = dropzone.querySelectorAll('.dz-complete');\r\n\r\n            setTimeout(function () {\r\n                progressBars.forEach(progressBar => {\r\n                    progressBar.querySelector('.progress-bar').style.opacity = \"0\";\r\n                    progressBar.querySelector('.progress').style.opacity = \"0\";\r\n                });\r\n            }, 300);\r\n        });\r\n    }\r\n\r\n\r\n    // Public methods\r\n    return {\r\n        init: function () {\r\n            initForm();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTAppInboxCompose.init();\r\n});\r\n"]}