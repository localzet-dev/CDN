{"version":3,"file":"list.js","names":["KTSubscriptionsList","table","datatable","toolbarBase","toolbarSelected","selectedCount","handleRowDeletion","querySelectorAll","forEach","d","addEventListener","e","preventDefault","parent","target","closest","customerName","innerText","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","row","$","remove","draw","toggleToolbars","dismiss","initToggleToolbar","checkboxes","document","querySelector","deleteSelected","c","setTimeout","checked","allCheckboxes","checkedState","count","innerHTML","classList","add","init","getElementById","dateRow","realDate","moment","format","setAttribute","DataTable","info","order","pageLength","lengthChange","columnDefs","orderable","targets","on","search","filterForm","filterButton","resetButton","selectOptions","filterString","item","index","val","trigger","handleFilter","KTUtil","onDOMContentLoaded"],"sources":["apps/subscriptions/list/list.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar KTSubscriptionsList = function () {\r\n    // Define shared variables\r\n    var table;\r\n    var datatable;\r\n    var toolbarBase;\r\n    var toolbarSelected;\r\n    var selectedCount;\r\n\r\n    // Private functions\r\n    var initDatatable = function () {\r\n        // Set date data order\r\n        const tableRows = table.querySelectorAll('tbody tr');\r\n\r\n        tableRows.forEach(row => {\r\n            const dateRow = row.querySelectorAll('td');\r\n            const realDate = moment(dateRow[5].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 4th column in table\r\n            dateRow[5].setAttribute('data-order', realDate);\r\n        });\r\n\r\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n        datatable = $(table).DataTable({\r\n            \"info\": false,\r\n            'order': [],\r\n            \"pageLength\": 10,\r\n            \"lengthChange\": false,\r\n            'columnDefs': [\r\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n                { orderable: false, targets: 6 }, // Disable ordering on column 6 (actions)                \r\n            ]\r\n        });\r\n\r\n        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\r\n        datatable.on('draw', function () {\r\n            initToggleToolbar();\r\n            handleRowDeletion();\r\n            toggleToolbars();\r\n        });\r\n    }\r\n\r\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n    var handleSearch = function () {\r\n        const filterSearch = document.querySelector('[data-kt-subscription-table-filter=\"search\"]');\r\n        filterSearch.addEventListener('keyup', function (e) {\r\n            datatable.search(e.target.value).draw();\r\n        });\r\n    }\r\n\r\n    // Filter Datatable\r\n    var handleFilter = function () {\r\n        // Select filter options\r\n        const filterForm = document.querySelector('[data-kt-subscription-table-filter=\"form\"]');\r\n        const filterButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"filter\"]');\r\n        const resetButton = filterForm.querySelector('[data-kt-subscription-table-filter=\"reset\"]');\r\n        const selectOptions = filterForm.querySelectorAll('select');\r\n\r\n        // Filter datatable on submit\r\n        filterButton.addEventListener('click', function () {\r\n            var filterString = '';\r\n\r\n            // Get filter values\r\n            selectOptions.forEach((item, index) => {\r\n                if (item.value && item.value !== '') {\r\n                    if (index !== 0) {\r\n                        filterString += ' ';\r\n                    }\r\n\r\n                    // Build filter value options\r\n                    filterString += item.value;\r\n                }\r\n            });\r\n\r\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n            datatable.search(filterString).draw();\r\n        });\r\n\r\n        // Reset datatable\r\n        resetButton.addEventListener('click', function () {\r\n            // Reset filter form\r\n            selectOptions.forEach((item, index) => {\r\n                // Reset Select2 dropdown --- official docs reference: https://select2.org/programmatic-control/add-select-clear-items\r\n                $(item).val(null).trigger('change');\r\n            });\r\n\r\n            // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n            datatable.search('').draw();\r\n        });\r\n    }\r\n\r\n    // Delete subscirption\r\n    var handleRowDeletion = function () {\r\n        // Select all delete buttons\r\n        const deleteButtons = table.querySelectorAll('[data-kt-subscriptions-table-filter=\"delete_row\"]');\r\n\r\n        deleteButtons.forEach(d => {\r\n            // Delete button on click\r\n            d.addEventListener('click', function (e) {\r\n                e.preventDefault();\r\n\r\n                // Select parent row\r\n                const parent = e.target.closest('tr');\r\n\r\n                // Get customer name\r\n                const customerName = parent.querySelectorAll('td')[1].innerText;\r\n\r\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n                Swal.fire({\r\n                    text: \"Are you sure you want to delete \" + customerName + \"?\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: \"Yes, delete!\",\r\n                    cancelButtonText: \"No, cancel\",\r\n                    customClass: {\r\n                        confirmButton: \"btn fw-bold btn-danger\",\r\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                    }\r\n                }).then(function (result) {\r\n                    if (result.value) {\r\n                        Swal.fire({\r\n                            text: \"You have deleted \" + customerName + \"!.\",\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-primary\",\r\n                            }\r\n                        }).then(function () {\r\n                            // Remove current row\r\n                            datatable.row($(parent)).remove().draw();\r\n                        }).then(function () {\r\n                            // Detect checked checkboxes\r\n                            toggleToolbars();\r\n                        });\r\n                    } else if (result.dismiss === 'cancel') {\r\n                        Swal.fire({\r\n                            text: customerName + \" was not deleted.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-primary\",\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    // Init toggle toolbar\r\n    var initToggleToolbar = () => {\r\n        // Toggle selected action toolbar\r\n        // Select all checkboxes\r\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\r\n\r\n        // Select elements\r\n        toolbarBase = document.querySelector('[data-kt-subscription-table-toolbar=\"base\"]');\r\n        toolbarSelected = document.querySelector('[data-kt-subscription-table-toolbar=\"selected\"]');\r\n        selectedCount = document.querySelector('[data-kt-subscription-table-select=\"selected_count\"]');\r\n        const deleteSelected = document.querySelector('[data-kt-subscription-table-select=\"delete_selected\"]');\r\n\r\n        // Toggle delete selected toolbar\r\n        checkboxes.forEach(c => {\r\n            // Checkbox on click event\r\n            c.addEventListener('click', function () {\r\n                setTimeout(function () {\r\n                    toggleToolbars();\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        // Deleted selected rows\r\n        deleteSelected.addEventListener('click', function () {\r\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n            Swal.fire({\r\n                text: \"Are you sure you want to delete selected customers?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, delete!\",\r\n                cancelButtonText: \"No, cancel\",\r\n                customClass: {\r\n                    confirmButton: \"btn fw-bold btn-danger\",\r\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    Swal.fire({\r\n                        text: \"You have deleted all selected customers!.\",\r\n                        icon: \"success\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    }).then(function () {\r\n                        // Remove all selected customers\r\n                        checkboxes.forEach(c => {\r\n                            if (c.checked) {\r\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\r\n                            }\r\n                        });\r\n\r\n                        // Remove header checked box\r\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\r\n                        headerCheckbox.checked = false;\r\n                    }).then(function () {\r\n                        toggleToolbars(); // Detect checked checkboxes\r\n                        initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\r\n                    });\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Selected customers was not deleted.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Toggle toolbars\r\n    const toggleToolbars = () => {\r\n        // Select refreshed checkbox DOM elements \r\n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\r\n\r\n        // Detect checkboxes state & count\r\n        let checkedState = false;\r\n        let count = 0;\r\n\r\n        // Count checked boxes\r\n        allCheckboxes.forEach(c => {\r\n            if (c.checked) {\r\n                checkedState = true;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        // Toggle toolbars\r\n        if (checkedState) {\r\n            selectedCount.innerHTML = count;\r\n            toolbarBase.classList.add('d-none');\r\n            toolbarSelected.classList.remove('d-none');\r\n        } else {\r\n            toolbarBase.classList.remove('d-none');\r\n            toolbarSelected.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    return {\r\n        // Public functions  \r\n        init: function () {\r\n            table = document.getElementById('kt_subscriptions_table');\r\n\r\n            if (!table) {\r\n                return;\r\n            }\r\n\r\n            initDatatable();\r\n            initToggleToolbar();\r\n            handleSearch();\r\n            handleRowDeletion();\r\n            handleFilter();\r\n        }\r\n    }\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTSubscriptionsList.init();\r\n});"]}