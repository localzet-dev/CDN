{"version":3,"file":"view.js","names":["KTUsersViewRole","datatable","table","initToggleToolbar","checkboxes","querySelectorAll","deleteSelected","document","querySelector","forEach","c","addEventListener","setTimeout","toggleToolbars","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","checked","row","$","closest","remove","draw","dismiss","toolbarBase","toolbarSelected","selectedCount","allCheckboxes","checkedState","count","innerHTML","classList","add","init","dateRow","realDate","moment","format","setAttribute","DataTable","info","order","pageLength","lengthChange","columnDefs","orderable","targets","e","search","target","d","preventDefault","parent","userName","innerText","customerName","KTUtil","onDOMContentLoaded"],"sources":["apps/user-management/roles/view/view.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTUsersViewRole = function () {\r\n    // Shared variables\r\n    var datatable;\r\n    var table;\r\n\r\n    // Init add schedule modal\r\n    var initViewRole = () => {\r\n        // Set date data order\r\n        const tableRows = table.querySelectorAll('tbody tr');\r\n\r\n        tableRows.forEach(row => {\r\n            const dateRow = row.querySelectorAll('td');\r\n            const realDate = moment(dateRow[3].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 5th column in table\r\n            dateRow[3].setAttribute('data-order', realDate);\r\n        });\r\n\r\n         // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n         datatable = $(table).DataTable({\r\n            \"info\": false,\r\n            'order': [],\r\n            \"pageLength\": 5,\r\n            \"lengthChange\": false,\r\n            'columnDefs': [\r\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n                { orderable: false, targets: 4 }, // Disable ordering on column 4 (actions)\r\n            ]\r\n        });        \r\n    }\r\n\r\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n    var handleSearchDatatable = () => {\r\n        const filterSearch = document.querySelector('[data-kt-roles-table-filter=\"search\"]');\r\n        filterSearch.addEventListener('keyup', function (e) {\r\n            datatable.search(e.target.value).draw();\r\n        });\r\n    }\r\n\r\n    // Delete user\r\n    var handleDeleteRows = () => {\r\n        // Select all delete buttons\r\n        const deleteButtons = table.querySelectorAll('[data-kt-roles-table-filter=\"delete_row\"]');\r\n\r\n        deleteButtons.forEach(d => {\r\n            // Delete button on click\r\n            d.addEventListener('click', function (e) {\r\n                e.preventDefault();\r\n\r\n                // Select parent row\r\n                const parent = e.target.closest('tr');\r\n\r\n                // Get customer name\r\n                const userName = parent.querySelectorAll('td')[1].innerText;\r\n\r\n                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n                Swal.fire({\r\n                    text: \"Are you sure you want to delete \" + userName + \"?\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: \"Yes, delete!\",\r\n                    cancelButtonText: \"No, cancel\",\r\n                    customClass: {\r\n                        confirmButton: \"btn fw-bold btn-danger\",\r\n                        cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                    }\r\n                }).then(function (result) {\r\n                    if (result.value) {\r\n                        Swal.fire({\r\n                            text: \"You have deleted \" + userName + \"!.\",\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-primary\",\r\n                            }\r\n                        }).then(function () {\r\n                            // Remove current row\r\n                            datatable.row($(parent)).remove().draw();\r\n                        });\r\n                    } else if (result.dismiss === 'cancel') {\r\n                        Swal.fire({\r\n                            text: customerName + \" was not deleted.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-primary\",\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    // Init toggle toolbar\r\n    var initToggleToolbar = () => {\r\n        // Toggle selected action toolbar\r\n        // Select all checkboxes\r\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\r\n\r\n        // Select elements\r\n        const deleteSelected = document.querySelector('[data-kt-view-roles-table-select=\"delete_selected\"]');\r\n\r\n        // Toggle delete selected toolbar\r\n        checkboxes.forEach(c => {\r\n            // Checkbox on click event\r\n            c.addEventListener('click', function () {\r\n                setTimeout(function () {\r\n                    toggleToolbars();\r\n                }, 50);\r\n            });\r\n        });\r\n\r\n        // Deleted selected rows\r\n        deleteSelected.addEventListener('click', function () {\r\n            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\r\n            Swal.fire({\r\n                text: \"Are you sure you want to delete selected customers?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, delete!\",\r\n                cancelButtonText: \"No, cancel\",\r\n                customClass: {\r\n                    confirmButton: \"btn fw-bold btn-danger\",\r\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    Swal.fire({\r\n                        text: \"You have deleted all selected customers!.\",\r\n                        icon: \"success\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    }).then(function () {\r\n                        // Remove all selected customers\r\n                        checkboxes.forEach(c => {\r\n                            if (c.checked) {\r\n                                datatable.row($(c.closest('tbody tr'))).remove().draw();\r\n                            }\r\n                        });\r\n\r\n                        // Remove header checked box\r\n                        const headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\r\n                        headerCheckbox.checked = false;\r\n                    }).then(function(){\r\n                        toggleToolbars(); // Detect checked checkboxes\r\n                        initToggleToolbar(); // Re-init toolbar to recalculate checkboxes\r\n                    });\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Selected customers was not deleted.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Toggle toolbars\r\n    const toggleToolbars = () => {\r\n        // Define variables\r\n        const toolbarBase = document.querySelector('[data-kt-view-roles-table-toolbar=\"base\"]');\r\n        const toolbarSelected = document.querySelector('[data-kt-view-roles-table-toolbar=\"selected\"]');\r\n        const selectedCount = document.querySelector('[data-kt-view-roles-table-select=\"selected_count\"]');\r\n\r\n        // Select refreshed checkbox DOM elements \r\n        const allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\r\n\r\n        // Detect checkboxes state & count\r\n        let checkedState = false;\r\n        let count = 0;\r\n\r\n        // Count checked boxes\r\n        allCheckboxes.forEach(c => {\r\n            if (c.checked) {\r\n                checkedState = true;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        // Toggle toolbars\r\n        if (checkedState) {\r\n            selectedCount.innerHTML = count;\r\n            toolbarBase.classList.add('d-none');\r\n            toolbarSelected.classList.remove('d-none');\r\n        } else {\r\n            toolbarBase.classList.remove('d-none');\r\n            toolbarSelected.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            table = document.querySelector('#kt_roles_view_table');\r\n            \r\n            if (!table) {\r\n                return;\r\n            }\r\n\r\n            initViewRole();\r\n            handleSearchDatatable();\r\n            handleDeleteRows();\r\n            initToggleToolbar();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTUsersViewRole.init();\r\n});"]}