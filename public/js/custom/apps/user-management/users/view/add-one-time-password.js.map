{"version":3,"file":"add-one-time-password.js","names":["KTUsersAddOneTimePassword","element","document","getElementById","form","querySelector","modal","bootstrap","Modal","init","validator","FormValidation","formValidation","fields","otp_mobile_number","validators","notEmpty","message","otp_confirm_password","plugins","trigger","Trigger","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","Swal","fire","text","icon","showCancelButton","buttonsStyling","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","value","hide","reset","dismiss","submitButton","validate","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","isConfirmed","initAddOneTimePassword","KTUtil","onDOMContentLoaded"],"sources":["apps/user-management/users/view/add-one-time-password.js"],"mappings":"AAAA,aAGA,IAAIA,0BAA4B,WAE5B,MAAMC,EAAUC,SAASC,eAAe,kCAClCC,EAAOH,EAAQI,cAAc,wCAC7BC,EAAQ,IAAIC,UAAUC,MAAMP,GA0JlC,MAAO,CAEHQ,KAAM,WAzJmB,MAGzB,IAAIC,EAAYC,eAAeC,eAC3BR,EACA,CACIS,OAAQ,CACJC,kBAAqB,CACjBC,WAAY,CACRC,SAAU,CACNC,QAAS,qCAIrBC,qBAAwB,CACpBH,WAAY,CACRC,SAAU,CACNC,QAAS,wCAMzBE,QAAS,CACLC,QAAS,IAAIT,eAAeQ,QAAQE,QACpCd,UAAW,IAAII,eAAeQ,QAAQG,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAOXxB,EAAQI,cAAc,wCAC9BqB,iBAAiB,SAASC,IAClCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,iBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPpC,EAAMqC,MAEd,GAAE,IAIe1C,EAAQI,cAAc,yCAC9BqB,iBAAiB,SAASC,IACnCA,EAAEC,iBAEFC,KAAKC,KAAK,CACNC,KAAM,yCACNC,KAAM,UACNC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAmB,kBACnBC,iBAAkB,aAClBC,YAAa,CACTC,cAAe,kBACfC,aAAc,0BAEnBC,MAAK,SAAUC,GACVA,EAAOC,OACPtC,EAAKwC,QACLtC,EAAMqC,QACoB,WAAnBF,EAAOI,SACdhB,KAAKC,KAAK,CACNC,KAAM,qCACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,oBAI/B,GAAE,IAIN,MAAMQ,EAAe7C,EAAQI,cAAc,yCAC3CyC,EAAapB,iBAAiB,SAAS,SAAUC,GAE7CA,EAAEC,iBAGElB,GACAA,EAAUqC,WAAWP,MAAK,SAAUQ,GAChCC,QAAQC,IAAI,cAEE,SAAVF,GAEAF,EAAaK,aAAa,oBAAqB,MAG/CL,EAAaM,UAAW,EAGxBC,YAAW,WAEPP,EAAaQ,gBAAgB,qBAG7BR,EAAaM,UAAW,EAGxBvB,KAAKC,KAAK,CACNC,KAAM,wCACNC,KAAM,UACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,qBAEpBE,MAAK,SAAUC,GACVA,EAAOc,aACPjD,EAAMqC,MAEd,GAGJ,GAAG,MAGHd,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNE,gBAAgB,EAChBC,kBAAmB,cACnBE,YAAa,CACTC,cAAe,oBAI/B,GAER,GAAE,EAMEkB,EACJ,EAER,CApKgC,GAuKhCC,OAAOC,oBAAmB,WACtB1D,0BAA0BS,MAC9B","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTUsersAddOneTimePassword = function () {\r\n    // Shared variables\r\n    const element = document.getElementById('kt_modal_add_one_time_password');\r\n    const form = element.querySelector('#kt_modal_add_one_time_password_form');\r\n    const modal = new bootstrap.Modal(element);\r\n\r\n    // Init one time password modal\r\n    var initAddOneTimePassword = () => {\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'otp_mobile_number': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Valid mobile number is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'otp_confirm_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Password confirmation is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Close button handler\r\n        const closeButton = element.querySelector('[data-kt-users-modal-action=\"close\"]');\r\n        closeButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to close?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, close it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                }\r\n            });\r\n        });\r\n\r\n        // Cancel button handler\r\n        const cancelButton = element.querySelector('[data-kt-users-modal-action=\"cancel\"]');\r\n        cancelButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Submit button handler\r\n        const submitButton = element.querySelector('[data-kt-users-modal-action=\"submit\"]');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function (result) {\r\n                                if (result.isConfirmed) {\r\n                                    modal.hide();\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    } else {\r\n                        // Show popup warning. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        // Public functions\r\n        init: function () {\r\n            initAddOneTimePassword();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTUsersAddOneTimePassword.init();\r\n});"]}