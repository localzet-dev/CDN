{"version":3,"file":"save-order.js","names":["KTAppEcommerceSalesSaveOrder","table","datatable","init","$","flatpickr","altInput","altFormat","dateFormat","optionFormat","item","id","text","span","document","createElement","template","element","getAttribute","innerHTML","select2","placeholder","minimumResultsForSearch","Infinity","templateSelection","templateResult","querySelector","DataTable","order","scrollY","scrollCollapse","paging","info","columnDefs","orderable","targets","initSaveOrder","addEventListener","e","search","target","value","draw","getElementById","checked","classList","add","remove","handleShippingForm","checkboxes","querySelectorAll","totalPrice","forEach","checkbox","product","closest","cloneNode","innerWrapper","innerContent","wrapperClassesRemove","appendChild","productId","selectedProduct","removeChild","detectEmpty","message","products","length","innerText","calculateTotal","countPrice","price","parseFloat","toFixed","handleProductSelect","validator","form","submitButton","FormValidation","formValidation","fields","payment_method","validators","notEmpty","shipping_method","order_date","billing_order_address_1","billing_order_postcode","billing_order_state","billing_order_country","plugins","trigger","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","preventDefault","validate","then","status","console","log","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","window","location","html","handleSubmit","KTUtil","onDOMContentLoaded"],"sources":["apps/ecommerce/sales/save-order.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTAppEcommerceSalesSaveOrder = function () {\r\n    // Shared variables\r\n    var table;\r\n    var datatable;\r\n\r\n    // Private functions\r\n    const initSaveOrder = () => {\r\n        // Init flatpickr\r\n        $('#kt_ecommerce_edit_order_date').flatpickr({\r\n            altInput: true,\r\n            altFormat: \"d F, Y\",\r\n            dateFormat: \"Y-m-d\",\r\n        });\r\n\r\n        // Init select2 country options\r\n        // Format options\r\n        const optionFormat = (item) => {\r\n            if ( !item.id ) {\r\n                return item.text;\r\n            }\r\n\r\n            var span = document.createElement('span');\r\n            var template = '';\r\n\r\n            template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\r\n            template += item.text;\r\n\r\n            span.innerHTML = template;\r\n\r\n            return $(span);\r\n        }\r\n\r\n        // Init Select2 --- more info: https://select2.org/        \r\n        $('#kt_ecommerce_edit_order_billing_country').select2({\r\n            placeholder: \"Select a country\",\r\n            minimumResultsForSearch: Infinity,\r\n            templateSelection: optionFormat,\r\n            templateResult: optionFormat\r\n        });\r\n\r\n        $('#kt_ecommerce_edit_order_shipping_country').select2({\r\n            placeholder: \"Select a country\",\r\n            minimumResultsForSearch: Infinity,\r\n            templateSelection: optionFormat,\r\n            templateResult: optionFormat\r\n        });\r\n\r\n        // Init datatable --- more info on datatables: https://datatables.net/manual/\r\n        table = document.querySelector('#kt_ecommerce_edit_order_product_table');\r\n        datatable = $(table).DataTable({\r\n            'order': [],\r\n            \"scrollY\": \"400px\",\r\n            \"scrollCollapse\": true,\r\n            \"paging\": false,\r\n            \"info\": false,\r\n            'columnDefs': [\r\n                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)\r\n            ]\r\n        });\r\n    }\r\n\r\n    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\r\n    var handleSearchDatatable = () => {\r\n        const filterSearch = document.querySelector('[data-kt-ecommerce-edit-order-filter=\"search\"]');\r\n        filterSearch.addEventListener('keyup', function (e) {\r\n            datatable.search(e.target.value).draw();\r\n        });\r\n    }\r\n\r\n    // Handle shipping form\r\n    const handleShippingForm = () => {\r\n        // Select elements\r\n        const element = document.getElementById('kt_ecommerce_edit_order_shipping_form');\r\n        const checkbox = document.getElementById('same_as_billing');\r\n\r\n        // Show/hide shipping form\r\n        checkbox.addEventListener('change', e => {\r\n            if (e.target.checked) {\r\n                element.classList.add('d-none');\r\n            } else {\r\n                element.classList.remove('d-none');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle product select\r\n    const handleProductSelect = () => {\r\n        // Define variables\r\n        const checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\r\n        const target = document.getElementById('kt_ecommerce_edit_order_selected_products');\r\n        const totalPrice = document.getElementById('kt_ecommerce_edit_order_total_price');\r\n\r\n        // Loop through all checked products\r\n        checkboxes.forEach(checkbox => {\r\n            checkbox.addEventListener('change', e => {\r\n                // Select parent row element\r\n                const parent = checkbox.closest('tr');\r\n                \r\n                // Clone parent element as variable\r\n                const product = parent.querySelector('[data-kt-ecommerce-edit-order-filter=\"product\"]').cloneNode(true);\r\n\r\n                // Create inner wrapper\r\n                const innerWrapper = document.createElement('div');\r\n                \r\n                // Store inner content\r\n                const innerContent = product.innerHTML;\r\n\r\n                // Add & remove classes on parent wrapper\r\n                const wrapperClassesAdd = ['col', 'my-2'];\r\n                const wrapperClassesRemove = ['d-flex', 'align-items-center'];\r\n\r\n                // Define additional classes\r\n                const additionalClasses = ['border', 'border-dashed', 'rounded', 'p-3', 'bg-body'];\r\n\r\n                // Update parent wrapper classes\r\n                product.classList.remove(...wrapperClassesRemove);\r\n                product.classList.add(...wrapperClassesAdd);\r\n\r\n                // Remove parent default content\r\n                product.innerHTML = '';\r\n\r\n                // Update inner wrapper classes\r\n                innerWrapper.classList.add(...wrapperClassesRemove);\r\n                innerWrapper.classList.add(...additionalClasses);                \r\n\r\n                // Apply stored inner content into new inner wrapper\r\n                innerWrapper.innerHTML = innerContent;\r\n\r\n                // Append new inner wrapper to parent wrapper\r\n                product.appendChild(innerWrapper);\r\n\r\n                // Get product id\r\n                const productId = product.getAttribute('data-kt-ecommerce-edit-order-id');\r\n\r\n                if (e.target.checked) {\r\n                    // Add product to selected product wrapper\r\n                    target.appendChild(product);\r\n                } else {\r\n                    // Remove product from selected product wrapper\r\n                    const selectedProduct = target.querySelector('[data-kt-ecommerce-edit-order-id=\"' + productId + '\"]');\r\n                    if (selectedProduct) {\r\n                        target.removeChild(selectedProduct);\r\n                    }\r\n                }\r\n\r\n                // Trigger empty message logic\r\n                detectEmpty();\r\n            });\r\n        });\r\n\r\n        // Handle empty list message\r\n        const detectEmpty = () => {\r\n            // Select elements\r\n            const message = target.querySelector('span');\r\n            const products = target.querySelectorAll('[data-kt-ecommerce-edit-order-filter=\"product\"]');\r\n\r\n            // Detect if element is empty\r\n            if (products.length < 1) {\r\n                // Show message\r\n                message.classList.remove('d-none');\r\n\r\n                // Reset price\r\n                totalPrice.innerText = '0.00';\r\n            } else {\r\n                // Hide message\r\n                message.classList.add('d-none');\r\n\r\n                // Calculate price\r\n                calculateTotal(products);\r\n            }\r\n        }\r\n\r\n        // Calculate total cost\r\n        const calculateTotal = (products) => {\r\n            let countPrice = 0;\r\n\r\n            // Loop through all selected prodcucts\r\n            products.forEach(product => {\r\n                // Get product price\r\n                const price = parseFloat(product.querySelector('[data-kt-ecommerce-edit-order-filter=\"price\"]').innerText);\r\n\r\n                // Add to total\r\n                countPrice = parseFloat(countPrice + price);\r\n            });\r\n\r\n            // Update total price\r\n            totalPrice.innerText = countPrice.toFixed(2);\r\n        }\r\n    }\r\n\r\n    // Submit form handler\r\n    const handleSubmit = () => {\r\n        // Define variables\r\n        let validator;\r\n\r\n        // Get elements\r\n        const form = document.getElementById('kt_ecommerce_edit_order_form');\r\n        const submitButton = document.getElementById('kt_ecommerce_edit_order_submit');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'payment_method': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Payment method is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'shipping_method': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Shipping method is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'order_date': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Order date is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'billing_order_address_1': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Address line 1 is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'billing_order_postcode': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Postcode is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'billing_order_state': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'State is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'billing_order_country': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Country is required'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Handle submit button\r\n        submitButton.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable submit button whilst loading\r\n                        submitButton.disabled = true;\r\n\r\n                        setTimeout(function () {\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function (result) {\r\n                                if (result.isConfirmed) {\r\n                                    // Enable submit button after loading\r\n                                    submitButton.disabled = false;\r\n\r\n                                    // Redirect to customers list page\r\n                                    window.location = form.getAttribute(\"data-kt-redirect\");\r\n                                }\r\n                            });\r\n                        }, 2000);\r\n                    } else {\r\n                        Swal.fire({\r\n                            html: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    // Public methods\r\n    return {\r\n        init: function () {\r\n\r\n            initSaveOrder();\r\n            handleSearchDatatable();\r\n            handleShippingForm();\r\n            handleProductSelect();\r\n            handleSubmit();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTAppEcommerceSalesSaveOrder.init();\r\n});\r\n"]}