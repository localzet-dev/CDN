{"version":3,"file":"fido.js","names":["async","createRegistration","navigator","credentials","create","Error","axios","get","then","response","createArgs","data","success","msg","recursiveBase64StrToArrayBuffer","cred","authenticatorAttestationResponse","transports","getTransports","clientDataJSON","arrayBufferToBase64","attestationObject","post","authenticatorAttestationServerResponse","catch","error","err","console","checkRegistration","getArgs","id","rawId","authenticatorData","signature","userHandle","obj","prefix","suffix","key","str","substring","length","binary_string","window","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","binary","byteLength","String","fromCharCode","btoa"],"sources":["fido/fido.js"],"mappings":"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","sourcesContent":["/*!\r\n * Triangle FIDO2 Plugin\r\n * https://github.com/localzet-dev/FIDO2\r\n *\r\n * Copyright Ivan Zorin <creator@localzet.com>\r\n * Released under the AGPL-3.0 license\r\n * https://www.gnu.org/licenses/agpl\r\n *\r\n * Date: 2023-03-21T22:48Z\r\n */\r\nasync function createRegistration() {\r\n    try {\r\n        if (!navigator.credentials || !navigator.credentials.create) {\r\n            throw new Error('Браузер не поддерживается');\r\n        }\r\n\r\n        axios.get('/app/FIDO/create').then(async function (response) {\r\n            const createArgs = response.data;\r\n\r\n            if (createArgs.success === false) {\r\n                throw new Error(createArgs.msg || 'Произошла неизвестная ошибка');\r\n            }\r\n\r\n            recursiveBase64StrToArrayBuffer(createArgs);\r\n\r\n            const cred = await navigator.credentials.create(createArgs);\r\n\r\n            const authenticatorAttestationResponse = {\r\n                transports: cred.response.getTransports ? cred.response.getTransports() : null,\r\n                clientDataJSON: cred.response.clientDataJSON ? arrayBufferToBase64(cred.response.clientDataJSON) : null,\r\n                attestationObject: cred.response.attestationObject ? arrayBufferToBase64(cred.response.attestationObject) : null\r\n            };\r\n\r\n            axios.post('/app/FIDO/create', authenticatorAttestationResponse).then(function (response) {\r\n                const authenticatorAttestationServerResponse = response.data;\r\n\r\n\r\n                if (authenticatorAttestationServerResponse.success) {\r\n                    return true;\r\n                } else {\r\n                    throw new Error(authenticatorAttestationServerResponse.msg);\r\n                }\r\n            }).catch(function (error) {\r\n                throw new Error(error || 'Произошла неизвестная ошибка');\r\n            });\r\n        }).catch(function (error) {\r\n            throw new Error(error || 'Произошла неизвестная ошибка');\r\n        });\r\n\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return false;\r\n    }\r\n}\r\n\r\nasync function checkRegistration() {\r\n    try {\r\n\r\n        if (!navigator.credentials || !navigator.credentials.create) {\r\n            throw new Error('Браузер не поддерживается');\r\n        }\r\n\r\n        axios.get('/app/FIDO/verify').then(async function (response) {\r\n            const getArgs = response.data;\r\n\r\n            if (getArgs.success === false) {\r\n                throw new Error(getArgs.msg);\r\n            }\r\n\r\n            recursiveBase64StrToArrayBuffer(getArgs);\r\n\r\n            const cred = await navigator.credentials.get(getArgs);\r\n\r\n            const authenticatorAttestationResponse = {\r\n                id: cred.rawId ? arrayBufferToBase64(cred.rawId) : null,\r\n                clientDataJSON: cred.response.clientDataJSON ? arrayBufferToBase64(cred.response.clientDataJSON) : null,\r\n                authenticatorData: cred.response.authenticatorData ? arrayBufferToBase64(cred.response.authenticatorData) : null,\r\n                signature: cred.response.signature ? arrayBufferToBase64(cred.response.signature) : null,\r\n                userHandle: cred.response.userHandle ? arrayBufferToBase64(cred.response.userHandle) : null\r\n            };\r\n\r\n            axios.post('/app/FIDO/verify', authenticatorAttestationResponse).then(function (response) {\r\n                const authenticatorAttestationServerResponse = response.data;\r\n\r\n                if (authenticatorAttestationServerResponse.success) {\r\n                    return true;\r\n                } else {\r\n                    throw new Error(authenticatorAttestationServerResponse.msg);\r\n                }\r\n            }).catch(function (error) {\r\n                throw new Error(error || 'Произошла неизвестная ошибка');\r\n            });\r\n\r\n\r\n        }).catch(function (error) {\r\n            throw new Error(error || 'Произошла неизвестная ошибка');\r\n        });\r\n\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * convert RFC 1342-like base64 strings to array buffer\r\n * @param {mixed} obj\r\n * @returns {undefined}\r\n */\r\nfunction recursiveBase64StrToArrayBuffer(obj) {\r\n    let prefix = '=?BINARY?B?';\r\n    let suffix = '?=';\r\n    if (typeof obj === 'object') {\r\n        for (let key in obj) {\r\n            if (typeof obj[key] === 'string') {\r\n                let str = obj[key];\r\n                if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {\r\n                    str = str.substring(prefix.length, str.length - suffix.length);\r\n\r\n                    let binary_string = window.atob(str);\r\n                    let len = binary_string.length;\r\n                    let bytes = new Uint8Array(len);\r\n                    for (let i = 0; i < len; i++) {\r\n                        bytes[i] = binary_string.charCodeAt(i);\r\n                    }\r\n                    obj[key] = bytes.buffer;\r\n                }\r\n            } else {\r\n                recursiveBase64StrToArrayBuffer(obj[key]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Convert a ArrayBuffer to Base64\r\n * @param {ArrayBuffer} buffer\r\n * @returns {String}\r\n */\r\nfunction arrayBufferToBase64(buffer) {\r\n    let binary = '';\r\n    let bytes = new Uint8Array(buffer);\r\n    let len = bytes.byteLength;\r\n    for (let i = 0; i < len; i++) {\r\n        binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n}"]}