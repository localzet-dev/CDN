{"version":3,"file":"fido.js","names":["FIDOAuth","verifyButton","recursiveBase64StrToArrayBuffer","obj","prefix","suffix","key","str","substring","length","binary_string","window","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","arrayBufferToBase64","binary","byteLength","String","fromCharCode","btoa","init","document","getElementById","navigator","credentials","create","swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","addEventListener","e","preventDefault","axios","get","then","async","response1","data","status","console","log","cred","authenticatorAttestationResponse","id","rawId","clientDataJSON","response","authenticatorData","signature","userHandle","post","response2","location","href","error","traces","catch","err","Util","onDOMContentLoaded"],"sources":["my/authentication/fido.js"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n// Определение класса\r\nvar FIDOAuth = function () {\r\n    var verifyButton;\r\n\r\n    // Приватные методы\r\n    var init = function () {\r\n        if (!navigator.credentials || !navigator.credentials.create) {\r\n            swal.fire({\r\n                text: \"Браузер не поддерживается\",\r\n                icon: \"error\",\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Хорошо!\",\r\n                customClass: {\r\n                    confirmButton: \"btn fw-bold btn-light-primary\"\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    var handle = function () {\r\n        verifyButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            axios.get('/fido/verify').then(async function (response1) {\r\n                if (response1.data.data && response1.data.status == 200) {\r\n                    console.log(response1.data.data)\r\n\r\n                    // try {\r\n                        recursiveBase64StrToArrayBuffer(response1.data.data);\r\n\r\n                        const cred = await navigator.credentials.get(response1.data.data);\r\n\r\n                        const authenticatorAttestationResponse = {\r\n                            id: cred.rawId ? arrayBufferToBase64(cred.rawId) : null,\r\n                            clientDataJSON: cred.response.clientDataJSON ? arrayBufferToBase64(cred.response.clientDataJSON) : null,\r\n                            authenticatorData: cred.response.authenticatorData ? arrayBufferToBase64(cred.response.authenticatorData) : null,\r\n                            signature: cred.response.signature ? arrayBufferToBase64(cred.response.signature) : null,\r\n                            userHandle: cred.response.userHandle ? arrayBufferToBase64(cred.response.userHandle) : null\r\n                        };\r\n                    // } catch (error) {\r\n                    //     swal.fire({\r\n                    //         text: \"Ошибка FIDO: \" + error,\r\n                    //         icon: \"error\",\r\n                    //         buttonsStyling: false,\r\n                    //         confirmButtonText: \"Хорошо!\",\r\n                    //         customClass: {\r\n                    //             confirmButton: \"btn fw-bold btn-light-primary\"\r\n                    //         }\r\n                    //     });\r\n                    // }\r\n\r\n                    axios.post('/fido/verify', authenticatorAttestationResponse).then(function (response2) {\r\n                        if (response2.data.data && response2.data.status == 200) {\r\n                            console.log(response2.data.data)\r\n                            location.href = \"/\";\r\n                        } else {\r\n                            console.error(response2.data.error, response2.data.traces)\r\n\r\n                            swal.fire({\r\n                                text: response2.data.error ?? \"Неизвестная ошибка\",\r\n                                icon: \"error\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Хорошо!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn fw-bold btn-light-primary\"\r\n                                }\r\n                            });\r\n                        }\r\n                    }).catch(function (error) {\r\n                        console.error(error)\r\n                        swal.fire({\r\n                            text: \"Ошибка FIDO: \" + error,\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Хорошо!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn fw-bold btn-light-primary\"\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    console.error(response1.data.error, response1.data.traces)\r\n\r\n                    swal.fire({\r\n                        text: response1.data.error ?? \"Неизвестная ошибка\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Хорошо!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn fw-bold btn-light-primary\"\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(function (error) {\r\n                console.error(error)\r\n                swal.fire({\r\n                    text: \"Ошибка FIDO: \" + error,\r\n                    icon: \"error\",\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: \"Хорошо!\",\r\n                    customClass: {\r\n                        confirmButton: \"btn fw-bold btn-light-primary\"\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert RFC 1342-like base64 strings to array buffer\r\n     * @param {mixed} obj\r\n     * @returns {undefined}\r\n     */\r\n    var recursiveBase64StrToArrayBuffer = function (obj) {\r\n        let prefix = '=?BINARY?B?';\r\n        let suffix = '?=';\r\n        if (typeof obj === 'object') {\r\n            for (let key in obj) {\r\n                if (typeof obj[key] === 'string') {\r\n                    let str = obj[key];\r\n                    if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {\r\n                        str = str.substring(prefix.length, str.length - suffix.length);\r\n\r\n                        let binary_string = window.atob(str);\r\n                        let len = binary_string.length;\r\n                        let bytes = new Uint8Array(len);\r\n                        for (let i = 0; i < len; i++) {\r\n                            bytes[i] = binary_string.charCodeAt(i);\r\n                        }\r\n                        obj[key] = bytes.buffer;\r\n                    }\r\n                } else {\r\n                    recursiveBase64StrToArrayBuffer(obj[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert a ArrayBuffer to Base64\r\n     * @param {ArrayBuffer} buffer\r\n     * @returns {String}\r\n     */\r\n    var arrayBufferToBase64 = function (buffer) {\r\n        let binary = '';\r\n        let bytes = new Uint8Array(buffer);\r\n        let len = bytes.byteLength;\r\n        for (let i = 0; i < len; i++) {\r\n            binary += String.fromCharCode(bytes[i]);\r\n        }\r\n        return window.btoa(binary);\r\n    }\r\n\r\n    // Публичные методы\r\n    return {\r\n        init: function () {\r\n            try {\r\n                verifyButton = document.getElementById('fido_verify');\r\n\r\n                if (init()) {\r\n                    handle();\r\n                }\r\n            } catch (err) {\r\n                swal.fire({\r\n                    text: err,\r\n                    icon: \"error\",\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: \"Хорошо!\",\r\n                    customClass: {\r\n                        confirmButton: \"btn fw-bold btn-light-primary\"\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}();\r\n\r\n// При загрузке документа\r\nUtil.onDOMContentLoaded(function () {\r\n    FIDOAuth.init();\r\n});\r\n"]}