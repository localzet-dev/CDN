{"version":3,"file":"register.js","names":["Register","form","submitButton","errorAlert","errorHead","errorBody","validator","init","document","querySelector","FormValidation","formValidation","fields","login","validators","notEmpty","message","email","regexp","password","plugins","trigger","Trigger","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","validate","then","status","setAttribute","disabled","axios","post","firstname","value","lastname","response","data","location","href","console","error","traces","error_head","innerHTML","classList","remove","catch","removeAttribute","Util","onDOMContentLoaded"],"sources":["my/authentication/register.js"],"mappings":"AAAA,aAEA,IAAIA,SAAW,WACX,IAAIC,EACAC,EAEAC,EACAC,EACAC,EAEAC,EAwGJ,MAAO,CAEHC,KAAM,WACFN,EAAOO,SAASC,cAAc,kBAC9BP,EAAeM,SAASC,cAAc,oBAEtCN,EAAaK,SAASC,cAAc,gBACpCL,EAAYI,SAASC,cAAc,eACnCJ,EAAYG,SAASC,cAAc,eA7GvCH,EAAYI,eAAeC,eAAeV,EAAM,CAC5CW,OAAQ,CACJC,MAAO,CACHC,WAAY,CACRC,SAAU,CACNC,QAAS,sBAIrBC,MAAO,CACHH,WAAY,CACRI,OAAQ,CACJA,OAAQ,6BACRF,QAAS,kCAEbD,SAAU,CACNC,QAAS,mCAIrBG,SAAU,CACNL,WAAY,CACRC,SAAU,CACNC,QAAS,wBAKzBI,QAAS,CACLC,QAAS,IAAIX,eAAeU,QAAQE,QACpCC,UAAW,IAAIb,eAAeU,QAAQI,WAAW,CAC7CC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAO3BzB,EAAa0B,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBACFxB,EAAUyB,WAAWC,MAAK,SAASC,GAChB,UAAXA,GACA/B,EAAagC,aAAa,iBAAkB,MAC5ChC,EAAaiC,UAAW,EAGxBC,MAAMC,KACF,YAAa,CACTC,UAAWrC,EAAKQ,cAAc,sBAAsB8B,MACpD1B,MAAOZ,EAAKQ,cAAc,kBAAkB8B,MAC5CC,SAAUvC,EAAKQ,cAAc,qBAAqB8B,MAClDtB,MAAOhB,EAAKQ,cAAc,kBAAkB8B,MAC5CpB,SAAUlB,EAAKQ,cAAc,qBAAqB8B,QAExDP,MAAK,SAASS,GAGRA,EAASC,MAAgC,KAAxBD,EAASC,KAAKT,QAC/BhC,EAAKQ,cAAc,sBAAsB8B,MAAQ,GACjDtC,EAAKQ,cAAc,qBAAqB8B,MAAQ,GAChDtC,EAAKQ,cAAc,kBAAkB8B,MAAQ,GAC7CtC,EAAKQ,cAAc,kBAAkB8B,MAAQ,GAC7CtC,EAAKQ,cAAc,qBAAqB8B,MAAQ,GAEhDI,SAASC,KAAO,MAEhBC,QAAQC,MAAML,EAASC,KAAKI,MAAOL,EAASC,KAAKK,QAE7CN,EAASC,KAAKM,aACd5C,EAAU6C,UAAYR,EAASC,KAAKM,YAGpCP,EAASC,KAAKI,QACdzC,EAAU4C,UAAYR,EAASC,KAAKI,OAGxC3C,EAAW+C,UAAUC,OAAO,UAEpC,IAAGC,OAAM,SAASN,GACdD,QAAQC,MAAML,UAEdrC,EAAU6C,UAAY,0BACtB5C,EAAU4C,UAAY,mEACtB9C,EAAW+C,UAAUC,OAAO,SAChC,IAEAjD,EAAamD,gBAAgB,kBAC7BnD,EAAaiC,UAAW,IAGxB/B,EAAU6C,UAAY,iBACtB5C,EAAU4C,UAAY,6BACtB9C,EAAW+C,UAAUC,OAAO,UAEpC,GACH,GAgBD,EAER,CA9He,GAiIfG,KAAKC,oBAAmB,WACpBvD,SAASO,MACb","sourcesContent":["\"use strict\";\r\n\r\nvar Register = function () {\r\n    var form;\r\n    var submitButton;\r\n\r\n    var errorAlert;\r\n    var errorHead;\r\n    var errorBody;\r\n\r\n    var validator;\r\n\r\n    var handleValidation = function (e) {\r\n        validator = FormValidation.formValidation(form, {\r\n            fields: {\r\n                login: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: \"Логин обязателен\"\r\n                        }\r\n                    }\r\n                },\r\n                email: {\r\n                    validators: {\r\n                        regexp: {\r\n                            regexp: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n                            message: \"Это не адрес электронной почты\"\r\n                        },\r\n                        notEmpty: {\r\n                            message: \"Электронная почта обязательна\"\r\n                        }\r\n                    }\r\n                },\r\n                password: {\r\n                    validators: {\r\n                        notEmpty: {\r\n                            message: \"Пароль обязателен\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger,\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: \".fv-row\",\r\n                    eleInvalidClass: \"\",\r\n                    eleValidClass: \"\"\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    var handleSubmit = function (e) {\r\n        submitButton.addEventListener(\"click\", (function(e) {\r\n            e.preventDefault();\r\n            validator.validate().then(function(status) {\r\n                if (status === 'Valid') {\r\n                    submitButton.setAttribute(\"data-indicator\", \"on\");\r\n                    submitButton.disabled = true;\r\n\r\n                    // Check axios library docs: https://axios-http.com/docs/intro\r\n                    axios.post(\r\n                        '/register', {\r\n                            firstname: form.querySelector('[name=\"firstname\"]').value,\r\n                            login: form.querySelector('[name=\"login\"]').value,\r\n                            lastname: form.querySelector('[name=\"lastname\"]').value,\r\n                            email: form.querySelector('[name=\"email\"]').value,\r\n                            password: form.querySelector('[name=\"password\"]').value\r\n                        }\r\n                    ).then(function(response) {\r\n                        // console.error(response)\r\n\r\n                        if (response.data && response.data.status == 200) {\r\n                            form.querySelector('[name=\"firstname\"]').value = \"\";\r\n                            form.querySelector('[name=\"lastname\"]').value = \"\";\r\n                            form.querySelector('[name=\"login\"]').value = \"\";\r\n                            form.querySelector('[name=\"email\"]').value = \"\";\r\n                            form.querySelector('[name=\"password\"]').value = \"\";\r\n\r\n                            location.href = \"/\";\r\n                        } else {\r\n                            console.error(response.data.error, response.data.traces)\r\n\r\n                            if (response.data.error_head) {\r\n                                errorHead.innerHTML = response.data.error_head;\r\n                            }\r\n\r\n                            if (response.data.error) {\r\n                                errorBody.innerHTML = response.data.error\r\n                            }\r\n\r\n                            errorAlert.classList.remove(\"d-none\");\r\n                        }\r\n                    }).catch(function(error) {\r\n                        console.error(response)\r\n\r\n                        errorHead.innerHTML = \"Ошибка связи с сервером\";\r\n                        errorBody.innerHTML = \"Проверьте соединение с интернетом или обратитесь к администрации\"\r\n                        errorAlert.classList.remove(\"d-none\");\r\n                    });\r\n\r\n                    submitButton.removeAttribute(\"data-indicator\");\r\n                    submitButton.disabled = false;\r\n\r\n                } else {\r\n                    errorHead.innerHTML = \"Ошибка запроса\";\r\n                    errorBody.innerHTML = \"Проверьте введённые данные\"\r\n                    errorAlert.classList.remove(\"d-none\");\r\n                }\r\n            });\r\n        }));\r\n    }\r\n\r\n    // Public functions\r\n    return {\r\n        // Initialization\r\n        init: function () {\r\n            form = document.querySelector('#register_form');\r\n            submitButton = document.querySelector('#register_submit');\r\n\r\n            errorAlert = document.querySelector('#error-alert');\r\n            errorHead = document.querySelector('#error-head');\r\n            errorBody = document.querySelector('#error-body');\r\n\r\n            handleValidation();\r\n            handleSubmit();\r\n        }\r\n    };\r\n}();\r\n\r\n// При загрузке документа\r\nUtil.onDOMContentLoaded(function () {\r\n    Register.init();\r\n});\r\n"]}