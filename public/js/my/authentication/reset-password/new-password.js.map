{"version":3,"file":"new-password.js","names":["AuthNewPassword","form","submitButton","validator","passwordMeter","validatePassword","getScore","init","document","querySelector","PasswordMeter","getInstance","FormValidation","formValidation","fields","password","validators","notEmpty","message","callback","input","value","length","identical","compare","toc","plugins","trigger","Trigger","event","bootstrap","Bootstrap5","rowSelector","eleInvalidClass","eleValidClass","addEventListener","e","preventDefault","revalidateField","validate","then","status","setAttribute","disabled","setTimeout","removeAttribute","Swal","fire","text","icon","buttonsStyling","confirmButtonText","customClass","confirmButton","result","isConfirmed","reset","redirectUrl","getAttribute","location","href","this","updateFieldStatus","Util","onDOMContentLoaded"],"sources":["my/authentication/reset-password/new-password.js"],"mappings":"AAAA,aAGA,IAAIA,gBAAkB,WAElB,IAAIC,EACAC,EACAC,EACAC,EA6HAC,EAAmB,WACnB,OAAsC,MAA7BD,EAAcE,UAC3B,EAGA,MAAO,CAEHC,KAAM,WACFN,EAAOO,SAASC,cAAc,sBAC9BP,EAAeM,SAASC,cAAc,wBACtCL,EAAgBM,cAAcC,YAAYV,EAAKQ,cAAc,iCAnIjEN,EAAYS,eAAeC,eAChCZ,EACA,CACCa,OAAQ,CACQC,SAAY,CACRC,WAAY,CACRC,SAAU,CACNC,QAAS,4BAEbC,SAAU,CACND,QAAS,8BACTC,SAAU,SAASC,GACf,GAAIA,EAAMC,MAAMC,OAAS,EACrB,OAAOjB,GAEf,KAIZ,mBAAoB,CAChBW,WAAY,CACRC,SAAU,CACNC,QAAS,yCAEbK,UAAW,CACPC,QAAS,WACL,OAAOvB,EAAKQ,cAAc,qBAAqBY,KACnD,EACAH,QAAS,mDAIrBO,IAAO,CACHT,WAAY,CACRC,SAAU,CACNC,QAAS,+CAKrCQ,QAAS,CACRC,QAAS,IAAIf,eAAec,QAAQE,QAAQ,CACzBC,MAAO,CACHd,UAAU,KAGjCe,UAAW,IAAIlB,eAAec,QAAQK,WAAW,CAC9BC,YAAa,UACbC,gBAAiB,GACjBC,cAAe,QAM/BhC,EAAaiC,iBAAiB,SAAS,SAAUC,GAC7CA,EAAEC,iBAEFlC,EAAUmC,gBAAgB,YAE1BnC,EAAUoC,WAAWC,MAAK,SAASC,GACvB,SAAVA,GAEMvC,EAAawC,aAAa,iBAAkB,MAG5CxC,EAAayC,UAAW,EAGxBC,YAAW,WAEP1C,EAAa2C,gBAAgB,kBAG7B3C,EAAayC,UAAW,EAGxBG,KAAKC,KAAK,CACNC,KAAM,6CACNC,KAAM,UACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,qBAEpBb,MAAK,SAAUc,GACd,GAAIA,EAAOC,YAAa,CACpBtD,EAAKQ,cAAc,qBAAqBY,MAAO,GAC/CpB,EAAKQ,cAAc,6BAA6BY,MAAO,GACvDjB,EAAcoD,QAGd,IAAIC,EAAcxD,EAAKyD,aAAa,qBAChCD,IACAE,SAASC,KAAOH,EAExB,CACJ,GACJ,GAAG,OAGHX,KAAKC,KAAK,CACNC,KAAM,sEACNC,KAAM,QACNC,gBAAgB,EAChBC,kBAAmB,cACnBC,YAAa,CACTC,cAAe,oBAIrC,GACE,IAEApD,EAAKQ,cAAc,0BAA0B0B,iBAAiB,SAAS,WAC/D0B,KAAKxC,MAAMC,OAAS,GACpBnB,EAAU2D,kBAAkB,WAAY,eAEhD,GAgBA,EAER,CAjJsB,GAoJtBC,KAAKC,oBAAmB,WACpBhE,gBAAgBO,MACpB","sourcesContent":["\"use strict\";\r\n\r\n// Class Definition\r\nvar AuthNewPassword = function() {\r\n    // Elements\r\n    var form;\r\n    var submitButton;\r\n    var validator;\r\n    var passwordMeter;\r\n\r\n    var handleForm = function(e) {\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        validator = FormValidation.formValidation(\r\n\t\t\tform,\r\n\t\t\t{\r\n\t\t\t\tfields: {\t\t\t\t\t \r\n                    'password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password is required'\r\n                            },\r\n                            callback: {\r\n                                message: 'Please enter valid password',\r\n                                callback: function(input) {\r\n                                    if (input.value.length > 0) {        \r\n                                        return validatePassword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    'confirm-password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password confirmation is required'\r\n                            },\r\n                            identical: {\r\n                                compare: function() {\r\n                                    return form.querySelector('[name=\"password\"]').value;\r\n                                },\r\n                                message: 'The password and its confirm are not the same'\r\n                            }\r\n                        }\r\n                    },\r\n                    'toc': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'You must accept the terms and conditions'\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t},\r\n\t\t\t\tplugins: {\r\n\t\t\t\t\ttrigger: new FormValidation.plugins.Trigger({\r\n                        event: {\r\n                            password: false\r\n                        }  \r\n                    }),\r\n\t\t\t\t\tbootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',  // comment to enable invalid state icons\r\n                        eleValidClass: '' // comment to enable valid state icons\r\n                    })\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n        submitButton.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            validator.revalidateField('password');\r\n\r\n            validator.validate().then(function(status) {\r\n\t\t        if (status == 'Valid') {\r\n                    // Show loading indication\r\n                    submitButton.setAttribute('data-indicator', 'on');\r\n\r\n                    // Disable button to avoid multiple click \r\n                    submitButton.disabled = true;\r\n\r\n                    // Simulate ajax request\r\n                    setTimeout(function() {\r\n                        // Hide loading indication\r\n                        submitButton.removeAttribute('data-indicator');\r\n\r\n                        // Enable button\r\n                        submitButton.disabled = false;\r\n\r\n                        // Show message popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        Swal.fire({\r\n                            text: \"You have successfully reset your password!\",\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        }).then(function (result) {\r\n                            if (result.isConfirmed) { \r\n                                form.querySelector('[name=\"password\"]').value= \"\";   \r\n                                form.querySelector('[name=\"confirm-password\"]').value= \"\";      \r\n                                passwordMeter.reset();  // reset password meter\r\n                                //form.submit();\r\n\r\n                                var redirectUrl = form.getAttribute('data-redirect-url');\r\n                                if (redirectUrl) {\r\n                                    location.href = redirectUrl;\r\n                                }\r\n                            }\r\n                        });\r\n                    }, 1500);   \t\t\t\t\t\t\r\n                } else {\r\n                    // Show error popup. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                    Swal.fire({\r\n                        text: \"Sorry, looks like there are some errors detected, please try again.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\"\r\n                        }\r\n                    });\r\n                }\r\n\t\t    });\r\n        });\r\n\r\n        form.querySelector('input[name=\"password\"]').addEventListener('input', function() {\r\n            if (this.value.length > 0) {\r\n                validator.updateFieldStatus('password', 'NotValidated');\r\n            }\r\n        });\r\n    }\r\n\r\n    var validatePassword = function() {\r\n        return  (passwordMeter.getScore() === 100);\r\n    }\r\n\r\n    // Public Functions\r\n    return {\r\n        // public functions\r\n        init: function() {\r\n            form = document.querySelector('#new_password_form');\r\n            submitButton = document.querySelector('#new_password_submit');\r\n            passwordMeter = PasswordMeter.getInstance(form.querySelector('[data-password-meter=\"true\"]'));\r\n\r\n            handleForm();\r\n        }\r\n    };\r\n}();\r\n\r\n// При загрузке документа\r\nUtil.onDOMContentLoaded(function() {\r\n    AuthNewPassword.init();\r\n});\r\n"]}